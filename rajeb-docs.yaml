openapi: 3.0.0
info:
  title: RAJEB
  description: REST API for JEB Express
  version: 0.1.0
servers:
  - url: https://rajeb-test-server.herokuapp.com
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
paths:
  /users:
    post:
      summary: Add new user
      tags:
        - user
      description: "Permission Level Enumeration<ul><li>1=Guest,</li><li>5=Customer,</li><li>10=Courier,</li><li>2063=Admin,</li><li>6159=Super User</li></ul>"
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              properties:
                fullName:
                  type: string
                  example: Masandy Hariyanto
                phoneNumber:
                  type: string
                  example: "081334559782"
                email:
                  type: string
                  example: masmasandy@gmail.com
                password:
                  type: string
                  example: themostepicpasswordofalltime
                permissionLevel:
                  type: string
                  example: 1
                  description: type ENUM with values `1`,`5`,`15`,`2063`,`6159`

      responses:
        200: # status code
          description: A JSON array of output data
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  output:
                    type: object
                    properties:
                      id:
                        type: string
                        description: This is the User ID
                      accessToken:
                        type: string
                        description: the token created is used as a new user login
                      refreshToken:
                        type: string
                        description: need to pass this token to create new accessToken at /auth/refresh
        400: 
          description: Bad request
    get:
      security:
        - bearerAuth: []
      summary: Find all user
      tags:
        - user
      description: get all data user from server, minimum permission level Admin or Super User
      responses:
        200:
          description: Object users
  /users/{userId}:
    get:
      parameters:
        - in: path
          name: userId
          schema: 
            type: string
          required: true
      security:
        - bearerAuth: []
      summary: Find one user
      description: Need accessToken
      tags:
        - user
      responses:
        200:
          description: Object single user
    patch:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          schema: 
            type: string
          required: true
      summary: Update user data
      description: "Requirements: <ul><li>Valid JWT</li><li>Minimum Permission Level is CUSTOMER</li><li>Active User</li><li>Only same user</li></ul>"
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                fullName:
                  type: string
                phone_number:
                  type: string
                email: 
                  type: string
      responses:
        200:
          description: User data updated
    delete:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          schema: 
            type: string
          required: true
      summary: Delete user data
      tags: 
        - user
      description: "Requirements: <ul><li>Valid JWT</li><li>Minimum Permission Level is ADMIN</li>"
      responses:
        204: 
          description: User deleted
  /auth:
    post:
      summary: To get accessToken and refreshToken
      description: Get the access token and refresh token using email and password
      tags:
        - auth
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        201:
          description: Id, accessToken and refreshToken
  /auth/refresh:
    post:
      security:
        - bearerAuth: []
      summary: To get accessToken
      description: Get access token using refresh token and need previous authorization header to process
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                refresh_token:
                  type: string
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
  /orders:
    post:
      tags:
        - order
      summary: Create new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                senderFullName:
                  type: string
                senderPhoneNumber:
                  type: string
                senderOriginId:
                  type: string
                senderAddress:
                  type: string
                senderPostCode:
                  type: string
                recipientFullName:
                  type: string
                recipientPhoneNumber:
                  type: string
                recipientDestinationId:
                  type: string
                recipientAddress:
                  type: string
                recipientPostCode:
                  type: string
                serviceId:
                  type: string
                itemName:
                  type: string
                itemTypeId:
                  type: string
                itemWeight:
                  type: number
                itemQty: 
                  type: number
                itemWidth:
                  type: number
                itemHeight:
                  type: number
                itemLong:
                  type: number
                itemValue:
                  type: number
                insurance:
                  type: boolean
                voucherId:
                  type: string

      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  awbNumber:
                    type: string
                  billingId:
                    type: string
  /tracking:
    get:
      tags:
        - order
      summary: Tracking data order
      parameters:
        - in: query
          name: id
          schema:
            type: string
            example: JR791703100001,JR791703100002
          required: true
          description: awbNumber separated by coma for multiple data
      responses: 
        200:
          description: ok
  /services:
    post:
      summary: Create new service
      security:
        - bearerAuth: []
      description: "Requirements:<ul><li>Valid JWT</li><li>Minimum permission is SUPER USER</li></ul>"
      requestBody:
        description: More information on schema
        required: true
        content:
          application/json:
            schema:
              properties:
                id: 
                  type: string
                  description: ID must be unique
                name:
                  type: string
                set_price: 
                  type: integer
                description:
                  type: string
                  description: Optional
      tags:
        - service
      responses:
        201:
          description: New service created
    get: 
      summary: Find all services
      tags: 
        - service
      responses:
        200:
          description: OK
  /regions:
    get:
      description: "/regions?src=v&val=kutisari<br>add parrent id for more specific result<br>/regions?src=v&val=kutisari&pid=3578050"
      tags:
        - common
      summary: To get region id
      parameters:
        - in: query
          name: src
          schema: 
            type: string
          description: "`p`rovince, `r`egions, `d`istrict, `v`illages"
          example: v
          required: true
        - in: query
          name: val
          schema:
            type: string
          description: "search value"
          example: kutisari
          required: true
        - in: query
          name: pid
          schema:
            type: string
          description: Parrent id for villages is districts, districts is regions, regions is provinces
      responses:
        200:
          description: Ok
    